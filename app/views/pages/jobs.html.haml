%nav#seNav.navbar.navbar-transparent.fixed-top.navbar-expand-lg{"color-on-scroll" => "100"}
  .cont.w-100

    %ul#nudne.box-shadow.nav.nav-pills.nav-pills-icons.nav-pills-info{role:"tablist", "data-controller":"togglemap", 'data-togglemap-open':'togglemap open', 'data-togglemap-close':'Toggle close'}
      %li.nav-item{title:'Search'}
        %a.nav-link.toggle-submenu.active.show(href="#map1" role="tab" data-toggle="tab" aria-selected="true")
          %i.material-icons search
          Search
      %li.nav-item{title:'Search Options'}
        %a.nav-link.toggle-submenu(href="#map2" role="tab" data-toggle="tab" aria-selected="false")
          %i.material-icons rule
          Options
      %li.nav-item{title:'Search on map'}
        %a.nav-link.toggle-submenu{href: "#mapka", role: "tab", 'data-toggle': "tab", 'aria-selected': "false"}
          %i.material-icons map
          Map

      %li.nav-item{title:'Expand less menu', }
        %a.nav-link.toggle-submenu.show#toggle-submenu(href="#tt" role="tab" data-toggle="tab" aria-selected="true")
          .div
            %i.material-icons unfold_less
            %span Menu
    
    .tab-content.card-container.hidden
      #map1.tab-pane.active
        = render 'pages/shared/search'
    
      #map2.tab-pane
        -# %nav.navbar.navbar-primary.navbar-color-on-scroll.navbar-expand-lg.navbar-transparent
        = render 'pages/shared/submenu', locals: { categories: @categories }
    
      #mapka.tab-pane
        .px-3{"data-target":"togglemap.toggleable"}
          -# - jobs_for_map
          -# - jobs_for_map0 = jobs_for_map[2]
          -# - jobs_for_map1 = jobs_for_map[0]
          .map-container.pb-2
            #map
      -# %button.btn-secondary.rounded.text-white{"data-action":"click->togglemap#toggle","data-target":"togglemap.buttontext"} Toggle map
      -# %button.btn-success.rounded.px-3.py-3.text-white{onclick:"getMeCurrentLocation"} Toggle map

.page-header.header-filter.clear-filter.blue-filter
  .container
    -# logo
    .row
      .col-md-8.ml-auto.mr-auto
        %h2.title.text-left Connecting great jobs to great candidates


.main.main-raised
  .container-fluid
    %h1 Job Board search results
    = link_to "Back to search", "/", :target => '_top'
    &nbsp;
    = link_to "Display jobs on a map", "/", :target => '_top'
    .row
      -# .section.section-basic
      - jobs_for_map = []

      - if @info.present?
        - results = @info
        #t{'data-url': @markery[1]}
        #tt{'data-url': @markery}
        - unless results.nil?
          .col-md-4
            .section.section-examples
              .container-fluid.text-center
                -# Next step
                .customer_menu
                  .card.card-nav-tabs.text-left
                    .card-header.card-header-info
                      %h4.card-title Search kewords:
                      %p.card-category.text-black= @info.size.to_s + ' jobs'
                    
                    .card-body.px-3
                      %ul
                        %li
                          %h4.text-info Search kewords:
                          %blockquote.blockquote
                            
                            - @query.each do |q| 
                              %p.text-primary= q
                        %li
                          %h4.text-info= "Categories: #{@categories.size} categories"
         
                          %blockquote.blockquote
                            
                            - @categories.each do |c|
                              %p= c['label']
                  
                .row
                  .col
                    .map-cont.pb-2
                      #map_rails{style:'height:100%'}
                .row
                  .col-md-6
                    %a{:href => "examples/landing-page.html", :target => "_blank"}
                      %img.img-raised.rounded.img-fluid{:alt => "Rounded Image", :src => "#{asset_pack_path('landing.jpg')}"}/
                  .col-md-6
                    %a{:href => "examples/profile-page.html", :target => "_blank"}
                      = image_tag "#{asset_pack_path('profile.jpg')}", class: "img-raised rounded img-fluid", :alt => "Rounded Image"
                      %button.btn.btn-link.btn-primary.btn-lg View Profile Page
          .col-md-8
            .section.section-examples
              = render partial: 'pages/job', locals: { results: results, jobs_for_map: jobs_for_map } 

    :javascript
      function getMeCurrentLocation(){
      navigator.geolocation.getCurrentPosition(function(position){
      return position
      });
      }
      function createForJobs(jobs){
      result = jobs.split(', ');
      result[0].replace('[', '');
      return result
      }
      function createForJobsTab(jobs){
      result = jobs.split(', ');
      result[0].replace('[', '');
      return result
      }

      function createForJobsMap(jobs){
      jobs.replace('[', '')
      result = jobs.split(']');
      //result.replace('", ', '')

      for (let i = 0; i < result.length; i++) {
      result[i] = result[i].replace('[[','').replace(', [', '')
      }
      return result
      }
      function createInfoWindow(text){
      var infowindow = new google.maps.InfoWindow({content: text});
      return infowindow;
      }
      // Initialize and add the map
      function initMap() {
      getMeCurrentLocation()
      function getMeCurrentLocation(){
        navigator.geolocation.getCurrentPosition(function(position){
        afterInitCurrentLocation(position)
        });
      }

      }
      function afterInitCurrentLocation(current_location) {
        //var current_position = getMeCurrentLocation();
        
        var tab = createForJobsMap("#{jobs_for_map}")
        var neww = $('#tt').data()
        // var neww = $("<%= escape_javascript(render @info) %>")

        

        console.log(neww)
        // The location of Uluru
        var uluru = {lat: current_location.coords.latitude, lng: current_location.coords.longitude};
        // The map, centered at Uluru
        var map2 = new google.maps.Map(
            document.getElementById('map_rails'), {zoom: 12, center: { lat: -34.397, lng: 150.644 }});

        var map = new google.maps.Map(
            document.getElementById('map'), {zoom: 12, center: uluru});
        var marker2 = new google.maps.Marker({position: uluru, map: map2});
        var info2 = createInfoWindow('d');
        google.maps.event.addListener(marker2, 'click', function(){
        info.open(map2, marker2);
        })

        // The marker, positioned at Uluru
        var marker = new google.maps.Marker({position: uluru, map: map});

        var contentString = '<div id="content">'+
        '<div id="siteNotice">'+
        '</div>'+
        '<h1 id="firstHeading" class="firstHeading">DOM</h1>'+
        '<div id="bodyContent">'+
        '<p></p>'+
        '<p>Attribution: Uluru, <a href="https://google.com" target="_blank">'+
        'https://en.wikipedia.org/w/index.php?title=Uluru</a> '+
        '(last visited June 22, 2009).</p>'+
        '</div>'+
        '</div>';

        var info = createInfoWindow(contentString);
        google.maps.event.addListener(marker, 'click', function(){
        info.open(map, marker);
        })

        var markers = []
        var infos = []
        let url;
        for(let i = 0;  i < tab.length; i++){

        markers[i] = new google.maps.Marker({position: {lat: parseFloat(createForJobsTab(tab[i])[1]), lng: parseFloat(createForJobsTab(tab[i])[2])}, map: map});
        try {
        url = new URL(createForJobsTab(tab[i])[3].replace('&quot;', '').replace('&quot;', ''));
        }
        catch(err) {
        //console.error(err.message);
        }
        
        contentString = '<div id="content">'+
        '<div id="siteNotice">'+
        '</div>'+
        `<h3 id="firstHeading" class="firstHeading text-primary">${createForJobsTab(tab[i])[0]}</h3>`+
        '<div id="bodyContent">'+
        '<p><a href='+`${url}`+'>Go to adversiter</a></p>'+
        `<p>Attribution: Uluru, <a href=${url}>${createForJobsTab(tab[i])[4]}</a> `+
        '().</p>'+
        '</div>'+
        '</div>';
        infos[i] = createInfoWindow(contentString);
        google.maps.event.addListener(markers[i], 'click', function(){
        infos[i].open(map, markers[i]);
        })
        }
      }

    -# %script{:defer => "defer", :src => "https://maps.googleapis.com/maps/api/js?key=AIzaSyDwomzJUCvqK6THoyQuiCYGpO2dRUvCE5w&callback=initMap"}:cdata
    = google_maps_api_script_tag




